plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.0.2'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.github.albertloubet'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
	maven { url 'https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates' }
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

ext {
	set('springCloudVersion', "2022.0.1")
	set('lombokVersion', '1.18.24')
	set('mapStructVersion', '1.5.1.Final')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation "org.projectlombok:lombok:${lombokVersion}"
	implementation "org.mapstruct:mapstruct:${mapStructVersion}"
	implementation 'com.google.code.gson:gson:2.10.1'
	implementation 'org.webjars:webjars-locator-core:0.52'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	implementation('org.springframework.boot:spring-boot-starter-security')

	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	compileOnly "org.mapstruct:mapstruct:${mapStructVersion}"

	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	runtimeOnly 'com.mysql:mysql-connector-j'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.compilerArgs = [
			'-Amapstruct.unmappedTargetPolicy=IGNORE'
	]
}

def coverageExclusions = [
		'**/base/**/*',
		'**/model/*',
		'**/configuration/*',
		'**/constant/**/*',
		'**/exception/*',
		'**/repository/**/*',
		'PixManagerApplication.java'
]

private excludeFiles(classDirectories, coverageExclusions) {
	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: coverageExclusions)
	}))
}

jacocoTestReport {
	reports {
		xml.enabled = true //true for link jacoco report with sonar
		xml.enabled true //true for link jacoco report with sonar
		csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
		xml.destination file("${buildDir}/reports/jacoco.xml")
	}

	afterEvaluate {
		excludeFiles(classDirectories, coverageExclusions)
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.3
			}
		}
	}

	afterEvaluate {
		excludeFiles(classDirectories, coverageExclusions)
	}
}

check {
	dependsOn jacocoTestCoverageVerification
}

test {
	finalizedBy(jacocoTestReport)
}